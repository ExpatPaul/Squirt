SQUIRT
======
A collection of utilities that can be used to build, maintain and execute frequently used FTP scripts. The intention is to build a solution that is a bit more maintainable than having an ever-growing collection of bash scripts.

Initialisation
==============
Before using Squirt for the first time, you will need to initialise the database. This is done with the command:
squirt.py init

This will create the database if none exists or, if you are upgrading, update the database as necessary. 

Commands
========
Squirt provides a number of commands (currently: build, copy, delete, display, list, exec, and init). You can display the details for any of these commands by typing:
squirt.py [command] -h

And overview of the commands is as follows

build
-----
Builds a script (writes a record to the database defining the default options to be used - any of these can be overridden when you execute the script). These options define the host, user ID and password, the action to be performed (see Supported Actions, below) and and which files and folders the action should be performed on.

copy
----
Copies a script. Creates a new script (ct = copy to) based on an existing script (cf = copy from). This command includes a number of optional arguments which will be applied to the new script.

delete
------
Deletes an existing script.

display
-------
Displays a script.

exec
----
Executes a script

init
----
Initialise (or upgrade) the database. If your database is already up to date, this command has no effect.

list
----
Lists all currently defined scripts.


Options
=======
The optional parameters are consistent across all commands for which they apply. They will either temporarily override a script when executed, or update the script depending on the command being executed.

–host
The FTP host

–user
User ID on the host

–pass
Password to be used on the host

–local
Local path. If this option is not used, then the current local folder is used.

–remote
Remote path – this is the folder on the FTP host you want to access.

–do
Do action – what you actually want the script to do. See Supported Actions, below, for details.

–files
The file or files on which the action is performed.

Supported Actions
=================
The --do option on the build and exec commands defines the action to be performed. At present, the following actions are supported:
del     Delete files matching the pattern described by --files
ls      List files matching the pattern described by --files

More will be added as and when I get around to it.


Warning
=======
All user IDs and Passwords are stored in the database in plain text. If this bothers you, do not enter the password when you build the script, but enter it as an override when you exec the script instead. 

Note
====
Squirt is designed to operate on groups of files and the file name entered is assumed to be the first len(file) characters of all files to be accessed.

For example, if you have a remote folder containing files:

testdoc.txt
testfile.png
testfile.txt
notatestfile.txt
… and you use:
squirt exec ScriptName --do=del --files=testfile
… the script will delete testfile.png and testfile.txt but not testdoc.txt or notatestfile.txt.
