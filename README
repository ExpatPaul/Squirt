SQUIRT
======
A collection of utilities that can be used to build, maintain and execute frequently used FTP scripts. The intention is to build a solution that is a bit more maintainable than having an ever-growing collection of bash scripts.

0.1 Release Note
================
This branch will break your database (sort of). When you run Squirt for the first time, the database will be created or updated. This time around the update will involve renaming the tables. In order to recover any pre-existing scripts you will need to go into sqlite with:

sqlite2 .squirt.db

... and then execute the following scripts. In order

insert into squirt_scripts select * from scripts;
drop table scripts;
drop table config;

From this point forward, any database changes should be seamless.

Commands
========
Squirt provides a number of commands (currently: build, copy, delete, display, list, exec, and init). You can display the details for any of these commands by typing:
squirt.py [command] -h

And overview of the commands is as follows

build
-----
Builds a script (writes a record to the database defining the default options to be used - any of these can be overridden when you execute the script). These options define the host, user ID and password, the action to be performed (see Supported Actions, below) and and which files and folders the action should be performed on.

copy
----
Copies a script. Creates a new script (ct = copy to) based on an existing script (cf = copy from). This command includes a number of optional arguments which will be applied to the new script.

delete
------
Deletes an existing script.

display
-------
Displays a script.

exec
----
Executes a script

init
----
Initialise (or upgrade) the database. If your database is already up to date, this command has no effect.

list
----
Lists all currently defined scripts.


Options
=======
The optional parameters are consistent across all commands for which they apply. They will either temporarily override a script when executed, or update the script depending on the command being executed.

–host
The FTP host

–user
User ID on the host

–pass
Password to be used on the host

–local
Local path. If this option is not used, then the current local folder is used.

–remote
Remote path – this is the folder on the FTP host you want to access.

–do
Do action – what you actually want the script to do. See Supported Actions, below, for details.

–files
The file or files on which the action is performed.

Supported Actions
=================
The --do option on the build and exec commands defines the action to be performed. At present, the following actions are supported:
chmod-xxx   Changes the access permissions of the file.
            This action is in two parts, split by a single -
            The first part of the command is the chmod
            The second part is the access permissions to apply
del         Delete files matching the pattern described by --files
get         Retrieves files matching the pattern described by --files. Files are retrieved to folder --local - this must be a full pathname (for now)
ls          List files matching the pattern described by --files
put         Puts files matching the pattern described by --files to server. Files are sent from folder --local to --remote

More will be added as and when I get around to it.


Warning
=======
All user IDs and Passwords are stored in the database in plain text. If this bothers you, do not enter the password when you build the script, but enter it as an override when you exec the script instead. 
